#ifndef cstl 
struct linkedlist{};
typedef struct linkedlist linkedlist;
struct dlinkedlist{};
typedef struct dlinkedlist dlinkedlist;
linkedlist* constructLinkedList(int datatype);
void insertAtHead(linkedlist* head,void* val);
void insertAtTail(linkedlist* head,void* n);
void deleteAtTail(linkedlist* head);
void deleteAtHead(linkedlist* head);
void printLinkedlist(linkedlist* head);
int sizeLinkedlist(linkedlist* head);
void freeMemoryLinkedList(linkedlist* head);
void makeCycle(linkedlist* head,int n);
int detectCycle(linkedlist* head);
void removeCycle(linkedlist* head);
dlinkedlist* constructDLL(int datatype);
void insertAtHeadDLL(dlinkedlist* head, void* val);
void insertAtTailDLL(dlinkedlist* head,void* val);
void deleteAtTailDLL(dlinkedlist* head);
void deleteAtHeadDLL(dlinkedlist* head);
void printDLL(dlinkedlist* head);
int sizeDLL(dlinkedlist* head);
void freeMemoryDLL(dlinkedlist* head);
void insertArrAtTail(linkedlist* head,void* arr[],int n);
void insertArrAtHead(linkedlist* head,void* arr[],int n);
void insertArrAtTailDLL(dlinkedlist* head, void* arr[],int n);
void insertArrAtHeadDLL(dlinkedlist* head, void* arr[],int n);
struct stack{};
typedef struct stack stack;
stack* constructStack(int datatype);
void push(stack* head,void* val);
void pop(stack* head);
void* top(stack* head);
int stackIsEmpty(stack* head);
int sizeOfStack(stack* head);
void freeMemoryStack(stack* head);
struct mstack{};
typedef struct mstack mstack;
mstack* constructMStack(int datatype);
void pushMStack(mstack* head,void* val);
void popMStack(mstack* head);
void* topMStack(mstack* head);
void* minMStack(mstack* head);
void* maxMStack(mstack* head);
int MStackIsEmpty(mstack* head);
int sizeMStack(mstack* head);
void freeMemoryMStack(mstack* head);
void pushArr(stack* head,void* arr[],int n);
void pushArrInMStack(mstack* head,void* arr[],int n);
struct queue{};
typedef struct queue queue;
queue* constructQueue(int datatype);
void enqueue(queue* head,void* val);
void dequeue(queue* head);
void* peek(queue* head);
int is_emptyQueue(queue* head);
void freeMemoryQueue(queue* head);
struct deque{};
typedef struct deque deque;
deque* constructDeque(int datatype);
void enqueueBack(deque* head,void* val);
void enqueueFront(deque* head,void* val);
void dequeueFront(deque* head);
void dequeueBack(deque* head);
void* peekFront(deque* head);
void* peekBack(deque* head);
int is_emptyDeque(deque* head);
void freeMemoryDeque(deque* head);
void enqueueArr(queue* head,void* arr[],int n);
void enqueueFrontArr(deque* head,void* arr[],int n);
void enqueueBackArr(deque* head,void* arr[],int n);
void itovp(int* arr,void* ptr[],int n);
void ctovp(char* arr,void* ptr[],int n);
void ftovp(float* arr,void* ptr[],int n);
struct btree{};
typedef struct btree btree;
btree* createNode(short datatype,void* value);
btree* insertLeft(btree* root, void* value);
btree* insertRight(btree* root, void* value);
void inorderTraversal(btree* root);
void preorderTraversal(btree* root);
void postorderTraversal(btree* root);
struct bst{};
typedef struct bst bst;
bst* createBSTNode(short datatype,void* item);
bst* insertInBST(bst* node, void* val , short datatype);
bst* minValueBST(bst* node);
bst* deleteFromBST(bst* root, void* val);
void postorderBST(bst *root);
void inorderBST(bst *root);
void preorderBST(bst *root);
void quick_sort(void** arr,int l,int r,short(*cmp)(void*, void*));
void merge_sort(void **a,int l,int r, short(*cmp)(void* ,void*));
void sort(void* arr, int n , short(*cmp)(void*, void*));
short INTASC(void* a, void* b);
short INTDESC(void* a, void* b);
short CHARASC(void* a, void* b);
short CHARDESC(void* a, void* b);
short FLOATASC(void* a, void* b);
short FLOATDESC(void* a, void* b);
short STRDESC(void* a, void* b);
short STRASC(void* a, void* b);
int binarySearch(void* arr, int n, void* ptrkey, short datatype);
int binarySearchInt(void* arr, int n, int key);
int binarySearchChar(void* arr, int n, char key);
int binarySearchFloat(void* arr, int n, float key);
int binarySearchString(char** arr, int n, char* key);
int searchArr(void* arr,int n, void* key, short datatype);
#define cstl
#endif
